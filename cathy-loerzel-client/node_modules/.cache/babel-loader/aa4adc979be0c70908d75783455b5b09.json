{"ast":null,"code":"const axios = require('axios');\n\nconst {\n  normalizeUrl,\n  normalizePostUrl\n} = require('../src/util');\n\nconst UnableToFetchUserDataError = require('./Exceptions/UnableToFetchUserDataError');\n\nconst UnableToFetchPostDataError = require('./Exceptions/UnableToFetchPostDataError');\n/**\n * Gets the data from the GraphQL Instagram interface.\n * @param {string} username\n * @throws UnableToFetchUserDataError\n * @return {Promise<Object>}\n */\n\n\nmodule.exports.getUserData = username => {\n  return new Promise(async (resolve, reject) => {\n    const URL = normalizeUrl(username);\n    const REQUEST_PARAMETERS = {\n      method: 'GET',\n      url: URL\n    };\n    axios(REQUEST_PARAMETERS).then(GQL => {\n      const user = GQL.data.graphql.user;\n      resolve({\n        link: URL.replace('/?__a=1', ''),\n        id: user.id,\n        biography: user.biography,\n        subscribersCount: user.edge_followed_by.count,\n        subscribtions: user.edge_follow.count,\n        fullName: user.full_name,\n        highlightCount: user.highlight_reel_count,\n        isBusinessAccount: user.is_business_account,\n        isRecentUser: user.is_joined_recently,\n        accountCategory: user.business_category_name,\n        linkedFacebookPage: user.connected_fb_page,\n        isPrivate: user.is_private,\n        isVerified: user.is_verified,\n        profilePic: user.profile_pic_url,\n        profilePicHD: user.profile_pic_url_hd,\n        username: user.username,\n        postsCount: user.edge_owner_to_timeline_media.count,\n        posts: user.edge_owner_to_timeline_media.edges.map(edge => {\n          let hasCaption = edge.node.edge_media_to_caption.edges[0];\n          return {\n            id: edge.node.id,\n            shortCode: edge.node.shortcode,\n            url: `https://www.instagram.com/p/${edge.node.shortcode}/`,\n            dimensions: edge.node.dimensions,\n            imageUrl: edge.node.display_url,\n            isVideo: edge.node.is_video,\n            caption: hasCaption ? hasCaption.node.text : '',\n            commentsCount: edge.node.edge_media_to_comment.count,\n            commentsDisabled: edge.node.comments_disabled,\n            timestamp: edge.node.taken_at_timestamp,\n            likesCount: edge.node.edge_liked_by.count,\n            location: edge.node.location,\n            children: edge.node.edge_sidecar_to_children ? edge.node.edge_sidecar_to_children.edges.map(edge => {\n              return {\n                id: edge.node.id,\n                shortCode: edge.node.shortcode,\n                dimensions: edge.node.dimensions,\n                imageUrl: edge.node.display_url,\n                isVideo: edge.node.is_video\n              };\n            }) : []\n          };\n        }) || []\n      });\n    }).catch(() => {\n      reject(UnableToFetchUserDataError.fromUsername(username));\n    });\n  });\n};\n/**\n * Using this a picture posted by a private won't work.\n * @param {string} shortcode\n * @returns {Promise<Object>}\n */\n\n\nmodule.exports.getPostData = shortcode => {\n  return new Promise(async (resolve, reject) => {\n    const URL = normalizePostUrl(shortcode);\n    const REQUEST_PARAMETERS = {\n      method: 'GET',\n      url: URL\n    };\n    axios(REQUEST_PARAMETERS).then(GQL => {\n      const media_data = GQL.data.graphql.shortcode_media;\n      const has_caption = media_data.edge_media_to_caption.edges.length > 0;\n      resolve({\n        link: URL.replace('/?__a=1', ''),\n        shortcode: media_data.shortcode,\n        dimensions: media_data.dimensions,\n        displayUrl: media_data.display_url,\n        isVideo: media_data.is_video,\n        wasCaptionEdited: media_data.caption_is_edited,\n        caption: has_caption ? media_data.edge_media_to_caption.edges[0].node.text : null,\n        commentsCount: media_data.edge_media_to_parent_comment.count,\n        areCommentsDisabled: media_data.comments_disabled,\n        takenAt: media_data.taken_at_timestamp,\n        likesCount: media_data.edge_media_preview_like.count,\n        location: media_data.location ? {\n          id: media_data.location.id,\n          hasPublicPage: media_data.location.has_public_page,\n          name: media_data.location.name,\n          slug: media_data.location.slug,\n          jsonName: media_data.location.address_json\n        } : null,\n        owner: {\n          id: media_data.owner.id,\n          username: media_data.owner.username,\n          profilePicture: media_data.owner.profile_pic_url,\n          full_name: media_data.owner.full_name,\n          postsCount: media_data.owner.edge_owner_to_timeline_media,\n          followersCount: media_data.owner.edge_followed_by,\n          isPrivate: media_data.owner.is_private,\n          isVerified: media_data.owner.is_verified\n        },\n        isAnAd: media_data.is_ad,\n        childrenPictures: media_data.edge_sidecar_to_children && media_data.edge_sidecar_to_children.edges ? media_data.edge_sidecar_to_children.edges.map(edge => {\n          return {\n            id: edge.node.id,\n            shortcode: edge.node.shortcode,\n            dimensions: edge.node.dimensions,\n            displayUrl: edge.node.display_url,\n            isVideo: edge.node.is_video\n          };\n        }) : [],\n        comments: media_data.edge_media_to_parent_comment.edges.map(edge => {\n          return {\n            id: edge.node.id,\n            text: edge.node.text,\n            createdAt: edge.node.created_at,\n            author: {\n              id: edge.node.owner.id,\n              isVerified: edge.node.owner.is_verified,\n              username: edge.node.owner.username,\n              profilePicture: edge.node.owner.profile_pic_url\n            },\n            likesCount: edge.node.edge_liked_by.count\n          };\n        }),\n        taggedUsers: media_data.edge_media_to_tagged_user.edges ? media_data.edge_media_to_tagged_user.edges.map(tag => {\n          return {\n            fullName: tag.node.user.full_name,\n            id: tag.node.user.id,\n            isVerified: tag.node.user.is_verified,\n            username: tag.node.user.username,\n            tagLocation: {\n              x: tag.node.x,\n              y: tag.node.y\n            }\n          };\n        }) : null\n      });\n    }).catch(() => {\n      reject(UnableToFetchPostDataError.fromShortcode(shortcode));\n    });\n  });\n};","map":{"version":3,"sources":["/home/austin/Documents/cathy-loerzel-refresh/cathy-loerzel-client/node_modules/user-instagram/src/scrape.js"],"names":["axios","require","normalizeUrl","normalizePostUrl","UnableToFetchUserDataError","UnableToFetchPostDataError","module","exports","getUserData","username","Promise","resolve","reject","URL","REQUEST_PARAMETERS","method","url","then","GQL","user","data","graphql","link","replace","id","biography","subscribersCount","edge_followed_by","count","subscribtions","edge_follow","fullName","full_name","highlightCount","highlight_reel_count","isBusinessAccount","is_business_account","isRecentUser","is_joined_recently","accountCategory","business_category_name","linkedFacebookPage","connected_fb_page","isPrivate","is_private","isVerified","is_verified","profilePic","profile_pic_url","profilePicHD","profile_pic_url_hd","postsCount","edge_owner_to_timeline_media","posts","edges","map","edge","hasCaption","node","edge_media_to_caption","shortCode","shortcode","dimensions","imageUrl","display_url","isVideo","is_video","caption","text","commentsCount","edge_media_to_comment","commentsDisabled","comments_disabled","timestamp","taken_at_timestamp","likesCount","edge_liked_by","location","children","edge_sidecar_to_children","catch","fromUsername","getPostData","media_data","shortcode_media","has_caption","length","displayUrl","wasCaptionEdited","caption_is_edited","edge_media_to_parent_comment","areCommentsDisabled","takenAt","edge_media_preview_like","hasPublicPage","has_public_page","name","slug","jsonName","address_json","owner","profilePicture","followersCount","isAnAd","is_ad","childrenPictures","comments","createdAt","created_at","author","taggedUsers","edge_media_to_tagged_user","tag","tagLocation","x","y","fromShortcode"],"mappings":"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","sourcesContent":["const axios = require('axios');\nconst {normalizeUrl, normalizePostUrl} = require('../src/util');\nconst UnableToFetchUserDataError = require('./Exceptions/UnableToFetchUserDataError');\nconst UnableToFetchPostDataError = require('./Exceptions/UnableToFetchPostDataError');\n\n/**\n * Gets the data from the GraphQL Instagram interface.\n * @param {string} username\n * @throws UnableToFetchUserDataError\n * @return {Promise<Object>}\n */\nmodule.exports.getUserData = (username) => {\n  return new Promise(async (resolve,reject) => {\n    const URL = normalizeUrl(username);\n    const REQUEST_PARAMETERS = {\n      method: 'GET',\n      url: URL\n    };\n    axios(REQUEST_PARAMETERS).then(GQL => {\n      const user = GQL.data.graphql.user;\n      resolve({\n        link: URL.replace('/?__a=1', ''),\n        id: user.id,\n        biography: user.biography,\n        subscribersCount: user.edge_followed_by.count,\n        subscribtions: user.edge_follow.count,\n        fullName: user.full_name,\n        highlightCount: user.highlight_reel_count,\n        isBusinessAccount: user.is_business_account,\n        isRecentUser: user.is_joined_recently,\n        accountCategory: user.business_category_name,\n        linkedFacebookPage: user.connected_fb_page,\n        isPrivate: user.is_private,\n        isVerified: user.is_verified,\n        profilePic: user.profile_pic_url,\n        profilePicHD: user.profile_pic_url_hd,\n        username: user.username,\n        postsCount: user.edge_owner_to_timeline_media.count,\n        posts: user.edge_owner_to_timeline_media.edges.map(edge => {\n          let hasCaption = edge.node.edge_media_to_caption.edges[0];\n          return {\n            id: edge.node.id,\n            shortCode: edge.node.shortcode,\n            url: `https://www.instagram.com/p/${edge.node.shortcode}/`,\n            dimensions: edge.node.dimensions,\n            imageUrl: edge.node.display_url,\n            isVideo: edge.node.is_video,\n            caption: hasCaption ? hasCaption.node.text : '',\n            commentsCount: edge.node.edge_media_to_comment.count,\n            commentsDisabled: edge.node.comments_disabled,\n            timestamp: edge.node.taken_at_timestamp,\n            likesCount: edge.node.edge_liked_by.count,\n            location: edge.node.location,\n            children: edge.node.edge_sidecar_to_children ? edge.node.edge_sidecar_to_children.edges.map(edge => {\n              return {\n                id: edge.node.id,\n                shortCode: edge.node.shortcode,\n                dimensions: edge.node.dimensions,\n                imageUrl: edge.node.display_url,\n                isVideo: edge.node.is_video,\n              }\n            }) : []\n          }\n        }) || []\n      });\n    }).catch(() => {\n        reject(UnableToFetchUserDataError.fromUsername(username));\n    });\n  });\n};\n\n/**\n * Using this a picture posted by a private won't work.\n * @param {string} shortcode\n * @returns {Promise<Object>}\n */\nmodule.exports.getPostData = (shortcode) => {\n  return new Promise(async (resolve, reject) => {\n    const URL = normalizePostUrl(shortcode);\n    const REQUEST_PARAMETERS = {\n      method: 'GET',\n      url: URL\n    };\n    axios(REQUEST_PARAMETERS)\n      .then(GQL => {\n        const media_data = GQL.data.graphql.shortcode_media;\n        const has_caption = media_data.edge_media_to_caption.edges.length > 0;\n        resolve({\n          link: URL.replace('/?__a=1', ''),\n          shortcode: media_data.shortcode,\n          dimensions: media_data.dimensions,\n          displayUrl: media_data.display_url,\n          isVideo: media_data.is_video,\n          wasCaptionEdited: media_data.caption_is_edited,\n          caption: has_caption? media_data.edge_media_to_caption.edges[0].node.text : null,\n          commentsCount: media_data.edge_media_to_parent_comment.count,\n          areCommentsDisabled: media_data.comments_disabled,\n          takenAt: media_data.taken_at_timestamp,\n          likesCount: media_data.edge_media_preview_like.count,\n          location: media_data.location ? {\n            id: media_data.location.id,\n            hasPublicPage: media_data.location.has_public_page,\n            name: media_data.location.name,\n            slug: media_data.location.slug,\n            jsonName: media_data.location.address_json,\n          } : null,\n          owner: {\n            id: media_data.owner.id,\n            username: media_data.owner.username,\n            profilePicture: media_data.owner.profile_pic_url,\n            full_name: media_data.owner.full_name,\n            postsCount: media_data.owner.edge_owner_to_timeline_media,\n            followersCount: media_data.owner.edge_followed_by,\n            isPrivate: media_data.owner.is_private,\n            isVerified: media_data.owner.is_verified,\n          },\n          isAnAd: media_data.is_ad,\n          childrenPictures: media_data.edge_sidecar_to_children && media_data.edge_sidecar_to_children.edges ? media_data.edge_sidecar_to_children.edges.map(edge => {\n            return {\n              id: edge.node.id,\n              shortcode: edge.node.shortcode,\n              dimensions: edge.node.dimensions,\n              displayUrl: edge.node.display_url,\n              isVideo: edge.node.is_video\n            }\n          }) : [],\n          comments: media_data.edge_media_to_parent_comment.edges.map(edge => {\n            return {\n              id: edge.node.id,\n              text: edge.node.text,\n              createdAt: edge.node.created_at,\n              author: {\n                id: edge.node.owner.id,\n                isVerified: edge.node.owner.is_verified,\n                username: edge.node.owner.username,\n                profilePicture: edge.node.owner.profile_pic_url\n              },\n              likesCount: edge.node.edge_liked_by.count\n            }\n          }),\n          taggedUsers: (media_data.edge_media_to_tagged_user.edges) ? media_data.edge_media_to_tagged_user.edges.map(tag => {\n            return {\n              fullName: tag.node.user.full_name,\n              id: tag.node.user.id,\n              isVerified: tag.node.user.is_verified,\n              username: tag.node.user.username,\n              tagLocation: {\n                x: tag.node.x,\n                y: tag.node.y\n              }\n            }\n          }) : null\n        });\n      })\n      .catch(() => {\n        reject(UnableToFetchPostDataError.fromShortcode(shortcode));\n      });\n  });\n};\n"]},"metadata":{},"sourceType":"script"}